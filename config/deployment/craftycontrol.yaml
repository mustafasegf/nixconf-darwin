apiVersion: v1
kind: Namespace
metadata:
  name: minecraft
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crafty-backups-pvc
  namespace: minecraft
spec:
  accessModes:
    - ReadWriteOnce # Or other access modes depending on your needs
  resources:
    requests:
      storage: 5Gi # Request a specific amount of storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crafty-logs-pvc
  namespace: minecraft
spec:
  accessModes:
    - ReadWriteOnce # Or other access modes depending on your needs
  resources:
    requests:
      storage: 5Gi # Request a specific amount of storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crafty-servers-pvc
  namespace: minecraft
spec:
  accessModes:
    - ReadWriteOnce # Or other access modes depending on your needs
  resources:
    requests:
      storage: 10Gi # Request a specific amount of storage (adjust as needed for server files)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crafty-config-pvc
  namespace: minecraft
spec:
  accessModes:
    - ReadWriteOnce # Or other access modes depending on your needs
  resources:
    requests:
      storage: 1Gi # Request a specific amount of storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crafty-import-pvc
  namespace: minecraft
spec:
  accessModes:
    - ReadWriteOnce # Or other access modes depending on your needs
  resources:
    requests:
      storage: 1Gi # Request a specific amount of storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crafty-deployment
  namespace: minecraft
  annotations:
    traefik.http.routers.crafty.rule: "Host(`mc.mus.sh`)"
    traefik.http.services.crafty.loadbalancer.server.port: "8443"
    traefik.http.services.crafty.loadbalancer.server.scheme: "https"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crafty
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: crafty
    spec:
      containers:
      - name: crafty-container
        image: registry.gitlab.com/crafty-controller/crafty-4:latest
        env:
        - name: TZ
          value: Asia/Jakarta
        ports:
        - containerPort: 8443
          name: https
        - containerPort: 8123
          name: dynmap
        - containerPort: 19132
          protocol: UDP
          name: bedrock
        # Kubernetes typically handles port ranges differently.
        # You might need to define individual ports or use a different approach
        # depending on your exact needs and how Crafty uses this range.
        # For simplicity, I'm not including the full range here.
        # If you need this range exposed externally, you'll need a more advanced Service configuration.
        volumeMounts:
        - name: crafty-backups
          mountPath: /crafty/backups
        - name: crafty-logs
          mountPath: /crafty/logs
        - name: crafty-servers
          mountPath: /crafty/servers
        - name: crafty-config
          mountPath: /crafty/app/config
        - name: crafty-import
          mountPath: /crafty/import
      volumes:
      - name: crafty-backups
        persistentVolumeClaim:
          claimName: crafty-backups-pvc
      - name: crafty-logs
        persistentVolumeClaim:
          claimName: crafty-logs-pvc
      - name: crafty-servers
        persistentVolumeClaim:
          claimName: crafty-servers-pvc
      - name: crafty-config
        persistentVolumeClaim:
          claimName: crafty-config-pvc
      - name: crafty-import
        persistentVolumeClaim:
          claimName: crafty-import-pvc
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: crafty-service
#   namespace: minecraft
# spec:
#   selector:
#     app: crafty
#   ports:
#     - name: https
#       protocol: TCP
#       port: 8443
#       targetPort: 8443
#     - name: dynmap
#       protocol: TCP
#       port: 8123
#       targetPort: 8123
#     - name: bedrock
#       protocol: UDP
#       port: 19132
#       targetPort: 19132
#     # Again, handling the port range 25500-25600 requires a different approach
#     # depending on how Crafty uses it and whether you need external access.
#     # If you need specific ports from this range, you can add them here individually.
#   type: ClusterIP # Use LoadBalancer or NodePort if you need external access
#   externalIPs:
#     - 10.241.240.61
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: crafty-ingress
#   namespace: minecraft
#   annotations:
#     ingress.kubernetes.io/ssl-redirect: "false"
#     ingress.kubernetes.io/frontend-entrypoint: "web"
#     traefik.ingress.kubernetes.io/router.entrypoints: web
#     # traefik.enable: "true"
#     # traefik.http.routers.crafty.rule: "Host(`mc.mus.sh`)"
#     # traefik.http.services.crafty.loadbalancer.server.port: "8443"
#     # traefik.http.services.crafty.loadbalancer.server.scheme: "https"
# spec:
#   rules:
#   - host: mc.mus.sh
#     http:
#       paths:
#       - path: /
#         pathType: Prefix # Or Exact, depending on your needs
#         backend:
#           service:
#             name: crafty-service
#             port:
#               number: 8443 # Route traffic to the HTTPS port of the Crafty Service
#   # tls: # Uncomment this section for HTTPS
#   # - hosts:
#   #   - mc.mus.sh
#   #   secretName: mc-mus-sh-tls # Create a Kubernetes Secret containing your TLS certificate and key
# ---
# apiVersion: helm.cattle.io/v1
# kind: HelmChartConfig
# metadata:
#   name: traefik
#   namespace: kube-system
# spec:
#   valuesContent: |-
#     globalArguments:
#     - "--serversTransport.insecureSkipVerify=true"
